Apple University Consortium Ruby Course, Summer 2009

DAY 1

Introduction
- about me
  - background
    - from melbourne
    - studied computer systems engineering at latrobe university
  - work experience
    - 11 years professional software engineering experience
      - c/c++, java, ruby
    - worked overseas in Germany for 8 years
      - Dresdner Bank, Volkswagen, Audi, Saturn and more
  - experience with ruby, rails and the mac
    - ruby experience since 2003
    - rails experience 3+ years
      - red artisan - ruby/rails focused consultancy
      - railsconf US * 2, railsconf EU * 1, WWDC * 1
      - clients such as CLEAR, SCT, Flashden/Envato, CSG Solar, Freshmeat
      - best fun i've had in my career :)


- about Gareth
  - background
    - From Melbourne
    - Lived in Melboure, Papua New Guinea and Vienna
    - Studied Software Engineering at RMIT
    - Run Melbourne CocoaHeads
  - work experience
    - 3 years professional software engineering experience
    - Mainly Ruby on Rails, some .NET and Cocoa.
    - AUC training courses + Dev World
  - experience with ruby, rails and the mac
    - Mac since 2003
    - Ruby and Rails since 2005
    - 2 * WWDC, 1 * DevWorld (speaker), 1 * WebDirections
    - Hannan IT, Six Figures, Box + Dice, CLEAR
    - I wouldn't have it any other way.
  
- Lets look a few things you can do with Ruby (DEMO)
  - Archaeopteryx using Ruby to control a midi device (garage band or reason?)
  - CLEAR, Ruby as a trading platform for Australia's Grain Industry
  - Twitter, instant world wide communication
    - New York plane crash, the best photos from the incident were found on Twitter - news pic
    - Incredible, billion dollar news companies cant beat the speed of news Twitter can provide
    - We'll be building something to work with Twitter a bit later on :)
  - Something a bit closer to home: http://yellowlab.com.au/, Yellow Pages, Rails application developed by Sensis
    - Piloting new features for the official yellowpages site.
  
- Mac OS X used as the development platform for all of these applications
  - Some really amazing things have and continue to be built
  - Allows for great integration with Mac OS X, eg:
    - Domain and Keychain Authentication via Mac OS X/server
    - Hardware accelerated multimedia processing via Core Image/Animation/Video/Audio
    - Addressbook, Calendar and MobileMe application integration

- The Ruby Value
  - There's a whole world-wide industry out there developing Ruby based applications
  - Exciting companies, early adopters, start ups, corporations, are all getting in on it
  - Competitive edge using a simple, dynamic and modern language
    - Increased development speed
      - Faster time to market
      - Small development teams
      - Lower development costs
  - Rails has been such a big catalyst for the language
    - We'll be doing some Rails work a bit later on as well :)
  - Large community support with many conferences, books, user groups, and more
    - Major US and European OReilly conferences and with many smaller regional ones as well

- General Course Agenda
  - Ruby, the language and platform (most of today)
    - Assume no knowledge of the language and start from the beginning
    - Will assume you're familiar with software development and have experience with at least one language
    - Ruby is an easy language to get started with, but has plenty of depth to master
      - Today we'll learn the language, standard libraries, and get started writing programs in Ruby
      - Tomorrow we'll cover advanced/awesome topics such as meta programming and domain specific languages
  - RubyCocoa
    - Ruby's excellent integration with Mac OS X/Cocoa
    - This afternoon
  - Ruby on Rails
    - Web framework and a major catalyst for Ruby's popularity
    - Integration with databases
    - Tomorrow afternoon
  - ... and we'll be building some things along the way
    - Command line Twitter client
    - Mac OS X Desktop Twitter client using RubyCocoa
      - (http party, Twitter gem and a table, perhaps some animation somewhere?)
    - Image processing RubyCocoa application, and will convert it into a
      - Rails application, file uploads reusing the RubyCocoa processing images using Core Image
    - Some free break time to experiment, ask questions


- Todays Plan (approx. times)
  - Start 9am
    - Intro, agenda, demos
  - Morning Tea 10.30
    - Ruby environment
    - Ruby the language and platform
  - Lunch 12.00
  - Reconvene 1pm
    - Hello World
    - Twitter 1.0 - command line twitter client
  - Afternoon Tea 3pm
    - Ruby the language
    - RubyCocoa
    - Twitter 2.0 - RubyCocoa twitter client
  - Finish 5pm

- Tomorrows Plan
  - Start 9am
    - Quick review thus far, Q&A
    - Advanced Ruby - the cool cat's code
  - Morning Tea 10.30
    - Ruby on Rails, the web framework
    - Hello World Rails App
  - Lunch 12.00
    - Ruby integration with Databases under Mac OS X
    - Core Image processing via RubyCocoa
  - Reconvene 1pm
    - Rails app with Core Image
    - Summary, questions & answer, feedback, etc.
  - Finish 5pm



- So What is Ruby?
  - Invented by Yukihiro “matz” Matsumoto in Japan 1995
  - From ruby-lang.org: "Ruby is... a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."
  - Interpreted, dynamic language
    - No separate compilation/build phase
  - Dynamically typed
    - no declaration of types when you reference objects
      - no compile time type checking - its all done at runtime
        - lets you do some very interesting things :)
        - but your code needs to be well exercised - BDD/TDD is really important 
  - Blended parts of his favorite languages (Perl, Smalltalk, Eiffel, Ada, and Lisp) to form a new language that balanced functional programming with imperative programming
    - Students will notice features from other languages along the way, particularly Smalltalk and Perl
  - Object Oriented - absolutely everything is an object
    - Even fundamental types (1.times, "hello".upcase!)
  - Message based (.send(:sym) is the same as a method invocation)
  - Free, free as in speech, not beer
    - Can be used commercially, can be modified, distributed to your hearts content
  - Dynamic runtime
    - Can define classes and methods at runtime, and on the fly
      - Can even catch calls for methods that don't exist and define them as needed
    - Can write (new) domain specific languages that better capture a business domain
      - music (arx)
      - software construction (rake)
      - software deployment (sprinkle)
      - software testing (rspec)
      - database schemas and queries (active record queries and migrations)
      - other DSLs? the common part - its all Ruby code


- Ruby Flavours
  - MRI 'Matz' Ruby
    - Current stable release is 1.8.7, Ruby 1.9 is the current development release
    - Written in C, standard library written in C and Ruby
  - JRuby, Rubinius, IronRuby are all alternate implementations based off of 1.8.x
    - JRuby, Java implementation of Ruby, Ruby.NET/CLR are .NET implementations
    - Rubinius is a Smalltalk blue book inspired implementation, VM in C++, rest in Ruby
    - Various levels of support
      - JRuby supports 1.8.x completely, runs Rails and can be pretty quick, all others are still in active development
    - Currently JRuby is the only implementation providing native threads
      - Even MRI still only uses green threads - advantages and disadvantages
  - Apple funding development of its own Ruby interpreter implementation
    - MacRuby, which is built on top of Cocoa
    - Currently under development, will support Ruby 1.8 and 1.9
    - Toll free bridging to Cocoa types, Cocoa garbage collection and direct integration with Cocoa, XCode and IB.
      - No type nor method signature conversion penalty, will be very fast
      - Native Cocoa Threads

- Ruby the environment
  - /usr/bin/ruby
  - /usr/bin/irb
  - ri/rdocs
  - gems

- Ruby first glance (intro, detail following)
  - The most basic ruby program
    - Hello World
    - Comparisons to other languages
      - Iteration in Java, Smalltalk, Ruby
      
      
Ruby

require 'book'
require 'glossy'
require 'softcover'

class Magazine < Book
  include Glossy, SoftCover

  attr_accessor :title, :content

  def initialize(title, content)
    @title = title
    @content = content
  end

  def to_s
    "#{@title}: #{@content}"
  end

end

Objective-C

#import "book.h"
#import "glossy.h"
#import "softcover.h"

@interface Magazine : Book <Glossy, SoftCover> {
  NSString * title;
  NSString * content;
}

@property (nonatomic, assign) NSString * title;
@property (nonatomic, assign) NSString * content;

- (id)initWithTitle:(NSString *)title andContent:(NSString *)content;

@end

@implementation Magazine
@synthesize title, content;

- (id)initWithTitle:(NSString *)aTitle andContent:(NSString *)someContent {
    if (self = [super init]) {
      title = aTitle;
      content = someContent;
    }
    return self;
}

+ (NSString *)description {
  return [NSString stringWithFormat:@"%s: %s", title, content];
}

@end

Java

import com.company.books.Book;
import com.company.books.printing.styles.Glossy;
import com.company.books.covers.SoftCover;

public class Magazine extends Book implements Glossy, SoftCover {
  
  public Magazine(String title, String content) {
    this.title = title;
    this.content = content;
  }
  
  public void setTitle(String title) {
    this.title = title;
  }
  
  public String getTitle() {
    return title;
  }
  
  // ... same for content ...
  
  public String toString() {
    return title + ": " + content;
  }
  
  private String title;
  private String content;
}
      
      - Class and method definitions in objective-C, ruby
      - Reflection in Java and Ruby
      - Some cool things, auto-closing IO streams via blocks, .send, symbols
    - Methods and message passing equality
    
- Ruby the language (the details)
  - Data types
    - Numbers
    - Text
    - Arrays
    - Hashes
    - Symbols
    - True, False and nil
      - Ruby's definition of Truth
    - Objects
      - Everything we've covered above is an object
  - Assignment
    - Multiple, parallel & abbreviated assignment
    - Constants
    - The splat operator
  - Operators (the usual stuff)
  - Statements
    - Conditionals (if, unless, case, ?:)
      - long and shorthand/modifier form
    - Loops (while, until, for)
      - long and shorthand/modifier form
  - Blocks
    - Explanation, scope, arguments
    - Uses
      - Enumeration
      - Numeric Iterators
  - Exceptions
    - Raise, rescue and ensure
  - Methods
    - Definitions
    - Arguments
    - Implicit return value
    - Optional parameters
    - Aliasing
  - Procs and lambdas
    - Closures
  - Classes
    - Method visibility
    - Creation and initializations
    - Subclassing and inheritance
    - Modules (ie. multiple inheritance)

- Ruby the platform
  - Regular Expressions
    - First class objects
  - Dates and Times
    - ActiveSupports cool features (10.days.ago, etc)
  - Files and IO
  - Networking (brief explanation of net/http, net/ftp, etc)
    - Auto closing streams via blocks
  - Threads and concurrency
    - Green threads


- Hello World (demo and the students to build)
  - The simplest Ruby program


- Twitter 1.0 (demo and the students to build)
  - Twitter explanation (in case anyone needs it?)
  - More advanced program
    - Will fetch and display the latest public tweets from twitter.com
  - We'll be reusing the Twitter gem
    - provides connectivity to twitter and simplifies/abstracts access to net/http
  - Demonstrate
    - Importing/requiring a gem dependency
    - Create an Application class to run
    - Create an instance of the Twitter class
      - Fetch the public tweet feed
      - Iterate via blocks, printing tweets to display


- RubyCocoa/MacRuby (part demo, part slides)
  - Bindings between Ruby and Mac OS X, allowing Ruby applications to drive the Cocoa API
    - rubycocoa.org, rubycocoa.com
  - Ruby and Objective-C share a similar heritage
    - Smalltalk
  - Similarities between Ruby and Objective-C provide for a smart method serialization and dispatch
    - Ruby method calls serialized directly to Objective-C calls
    - Ruby/Cocoa Types still require conversion
  - Naming conventions
    - Supporting Objective-C's named parameters in Ruby
  - XCode and Interface Builder integration
    - Defining and connecting outlets and actions

- Twitter 2.0 (demo and the students to build)
  - Create a Mac OS X RubyCocoa project, give it a cool and interesting name ;)
  - Define and write a twitter feed data source class
    - Leverage knowledge from Twitter 1.0
      - require gem
      - instantiate twitter class
      - access public twitter feed
    - Add outlets and actions
  - Open Interface Builder
    - Create a table
    - Connect/Bind the table to twitter feed data source class (use bindings or direct?)
  - Run application, listing public Twitter updates in a Desktop Cocoa application
  - Allow students to have some time to experiment
    - Refresh button via IB/Actions and Twitter data source
    - Create Twitter accounts and implement a form to post updates
    - Access Twitter author avatars and print in image box, etc.

- Summarize Day 1
  - Covered lots of material about Ruby, the language, platform and environment
  - Built two applications for interfacing to twitter micro-blogging platform
  - Questions and Answers?
  

DAY 2

- Todays Plan (duplicated from above)
  - Start 9am
    - Quick review thus far, Q&A
    - Advanced Ruby - the cool cat's code
  - Morning Tea 10.30
    - Ruby on Rails, the web framework
    - Hello World Rails App
  - Lunch 12.00
    - Ruby integration with Databases under Mac OS X
    - Core Image processing via RubyCocoa
  - Reconvene 1pm
    - Rails app with Core Image
    - Summary, questions & answer, feedback, etc.
  - Finish 5pm

Quick Review and Q&A (duplicated form above)
  - Covered lots of material about Ruby, the language, platform and environment
  - Built two applications for interfacing to twitter micro-blogging platform
  - Questions and Answers?



- Advanced Ruby Programming, cool cat's code
  - Modules
    - Multiple inheritance (non)support in Ruby
      - Dynamic language alleviate type casting issues in other languages such as Java
      - Duck typing rules
        - If the receiver responds to a method, it can be called without requiring any type changes
        - Similarities to Objective-C's performSelector:(SEL)aSelector method
      - Module inclusion allows reuse across classes of a non-descendent parents
    - Modules vs Classes
    - Prototype based programming
      - Extending classes with modules during runtime
  - Hooks
    - Callback methods invoked by the Ruby interpreter when your applications source code is parsed
    - Module
      - included
      - method_added
    - Class
      - inherited
      - method_added
  - Continuations (brief explanation, not a commonly used Ruby feature)
    - Continuations allow for the execution and call stack to be paused, serialized to an object, and continued later
    - Unfortunately cannot yet be serialized in Ruby 1.8, Rubinius and Ruby 1.9
  - Method lookup and dispatch
    - method_missing
  - Constant lookup and dispatch
    - const_missing

- Reflection and Introspection (demo and slides)
  - Inspecting Objects
    - Enumerating defined methods
    - Accessing and modifying object state
      - instance_variable_get/set
  - Evaluating Strings and Blocks
    - instance_eval, class/module_eval, and the bad one -> eval
  - Dynamically creating methods and constants/classes
    - ActiveSupport dependencies.rb
  - Method alias chaining
    - When to use
    - alias_method_chain

- Meta-programming & Domain Specific Languages
  - Allows you to create a new language, that maps to a particular domain, better than any general purpose language can
    - Essentially an extension of Ruby's syntax
    - Examples such as 
      - rspec, sprinkle, rake, active record/migrations, builder, markaby, and others
  - The meta/singleton/eigen- class
    - _why? :)
    - Allows you to define methods on a particular object instance or class rather than its class (its a meta class thats transparent between the receiver and its real class)
    - Accessing and defining methods in the meta-class
  - Defining DSLs (check with Jamis' Bucks blog post)
  - Removing methods
    - undef, BlankSlate and XML builder


- Ruby on Rails, the web framework (content from existing presentation available)
  - Catalyst for popularity of Ruby
  - DHH
  - Opinionated Web Framework
  - active support
  - active record
  - rest of rails
  - etc

- Hello World Rails App (demo and students to do)
  - Create the rails application - rails helloworld
  -

- Ruby integration with Databases under Mac OS X

- Core Image processing via RubyCocoa
  - Use RubyCocoa processor.rb to access Core Image easily

- Rails app with Core Image (demo and students to do)

- Summarize Day 2
  - Covered lots of material about advanced Ruby topics, Rails, and RubyCocoa
  - Built more applications for interfacing with Core Image via Ruby Cocoa
  - Questions and Answers?
